#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <signal.h>
#include <stdint.h>
#include <string.h>

#include "hatchery.h"


unsigned char * hatch_code (unsigned char *code){
  /* cast the byte array as a function */
  long (*ret)() = (long(*)())code;
  /* This struct will be loaded by the tracer with a representation
   * of all the registers at the end of the code's execution. 
   */
  // struct user_regs_struct
  REGISTERS regs;
  pid_t pid;
  /* fork a new process in which to run the shellcode */
  pid = fork();
  if (pid == 0){ // if in child process (tracee)
    ptrace(PTRACE_TRACEME, 0, NULL, NULL);
    ret(); // if you want to pass any params to the code, do it here
    kill(getpid(), SIGSTOP); // to let the tracer catch up
    exit(1); // we're done with this child, now
  } else {
    /* We're in the tracer process. It will observe the child and
     * report back to the head office.
     */
    int status;
    wait(&status);
    ptrace(PTRACE_GETREGS, pid, NULL, &regs);
    //    print_registers(regs);
    if (WTERMSIG(status) == SIGSEGV){
      fprintf(stderr, "-- SEGFAULT --\n");  // not detecting ?
    }
  }
  /* We need to convert the register struct into an ordinary byte
   * array, so that it can be sent back to lisp in a form cffi
   * understands.
   */
  unsigned char *rserial = calloc(sizeof(regs), sizeof(char));
  memcpy(rserial, &regs, sizeof(regs));
  return rserial; /* Remember to free after calling */
}

