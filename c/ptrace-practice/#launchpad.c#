#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <signal.h>
#include <sys/user.h>
#include <sys/resource.h>
#include <sys/ptrace.h>
#include <sys/wait.h>
#include <sys/reg.h>
#include <sys/types.h>
#include <stdint.h>
#include <string.h>

unsigned char *sc = "\x48\x31\xd2\x48\xbb\xff\x2f\x62\x69\x6e\x2f\x73\x68\x48\xc1\xeb\x08\x53\x48\x89\xe7\x48\x31\xc0\x50\x57\x48\x89\xe6\xb0\x3b\x0f\x05\x6a\x01\x5f\x6a\x3c\x58\x0f\x05";


void print_registers(struct user_regs_struct regs){
  printf("RAX: %x\n"
         "RBX: %x\n"
         "RCX: %x\n"
         "RDX: %x\n"
         "RSI: %x\n"
         "RDI: %x\n"
         ,regs.orig_rax
         ,regs.rbx
         ,regs.rcx
         ,regs.rdx
         ,regs.rsi
         ,regs.rdi
         ,regs.rip
         ,regs.eflags);
}



unsigned char * code_call (unsigned char *code){
  /* cast the byte array as a function */
  long (*ret)() = (long(*)())code;
  /* This struct will be loaded by the tracer with a representation
   * of all the registers at the end of the code's execution. 
   */
  struct user_regs_struct regs;
  pid_t pid;
  /* fork a new process in which to run the shellcode */
  pid = fork();
  if (pid == 0){ // if in child process (tracee)
    ptrace(PTRACE_TRACEME, 0, NULL, NULL);
    ret(); // if you want to pass any params to the code, do it here
    kill(getpid(), SIGSTOP); // to let the tracer catch up
    exit(1); // we're done with this child, now
  } else {
    /* We're in the tracer process. It will observe the child and
     * report back to the head office.
     */
    int status;
    wait(&status);
    ptrace(PTRACE_GETREGS, pid, NULL, &regs);
    print_registers(regs);
    if (WTERMSIG(status) == SIGSEGV){
      fprintf(stderr, "-- SEGFAULT --\n");  // not detecting ?
    }
  }
  /* We need to convert the register struct into an ordinary byte
   * array, so that it can be sent back to lisp in a form cffi
   * understands.
   */
  unsigned char *rserial = calloc(sizeof(regs), sizeof(char));
  memcpy(rserial, &regs, sizeof(regs));
  return rserial; /* Remember to free after calling */
}


/* main() is just for testing purposes. */
int main(int argc, char **argv){
  //printf("sizeof(long) = %d\n", sizeof(long));
  unsigned char input[0x1000] =

    "\x55"// push %rbp
    "\x48\x89\xe5" // mov %rsp,%rbp
    "\x89\x7d\xfc" // mov %edi, -0x4(%rbp)
    "\x89\x75\xf8" // mov %esi, -0x8(%rbp)
    "\x8b\x55\xfc" // mov -0x4(%rbp), %edx
    "\x8b\x45\xf8" // mov -0x8(%rbp), %eax
    "\x01\xd0"     // add %edx, %eax
    "\x5d"         // pop %rbp
    "\xc3";        // retq  // comment out for easy segfault
  unsigned char *result;
  scanf("%s", input);
  
  result = code_call(sc);
  printf("You're back.\n");
  struct user_regs_struct registers;
  memcpy(&registers, result, sizeof(registers));
  print_registers(registers);
  return 0;
}
